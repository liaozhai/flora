(function(){
	"use strict";

	var jsdom = require('jsdom');
	var url = require('url');
	var http = require('http');
	var jquery = require('jquery');

	var Bkrs = module.exports = function(proxy){
		this._proxy = proxy;
		this._rq = {
			protocol: 'http',
			host: 'bkrs.info',
			pathname: 'slovo.php'
		};
	};

	Bkrs.prototype = {
		_concatResponse: function(res, callback){
			var data = [];
			res.on('data', function(chunk){
				data.push(chunk);
			})
			.on('end', function(){
				callback(Buffer.concat(data).toString('utf8'));
			});
		},
		_parseField: function(text){
			return text.split(/[\n\r]+/)
			.filter(function(x){
				return !!x;
			})
			.map(function(x){
				return x.trim();
			});
		},
		find: function(word, callback){
			var path = url.format({
				protocol: this._rq.protocol,
				host: this._rq.host,
				pathname: this._rq.pathname,
				query: {ch: word}
			});

			var req =
				this._proxy ?
				{host: this._proxy.host, port: this._proxy.port, path: path} :
				path;

			http.get(
				req,
				function(res){
					this._concatResponse(res, function(html){
						jsdom.env(
							html,
							function(err, window) {
								if(err){
									callback(err);
									return;
								}
								var $ = jquery(window);
								var item = {
									w: this._parseField ($('#ch').text())[0],
									p: this._parseField($('.py').text()),
									x: this._parseField($('.ru').text())
								};
								window.close();
								callback(null, item);
							}.bind(this)
						);
						res.resume();
					}.bind(this));
				}.bind(this)
			)
			.on('error', function(err){ callback(err); });
		}
	};

	Bkrs.prototype.constructor = Bkrs;

}());
